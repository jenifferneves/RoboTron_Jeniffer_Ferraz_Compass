Revisão

Robot Framework é uma ferramenta de automação de testes baseada em palavras-chave (keyword-driven), muito usada para testar aplicações web, APIs, e muito mais.
Ele é fácil de aprender devido à sua sintaxe simples e estrutura organizada. 

Estrutura Básica de um Arquivo Robot

Arquivos no Robot Framework geralmente têm a extensão .robot e seguem uma organização baseada em seções. As principais seções são:

Settings (Configurações): Define configurações gerais, como bibliotecas e recursos utilizados.

Variables (Variáveis): Declara variáveis globais que podem ser usadas nos testes.

Test Cases (Casos de Teste): Define os testes que serão executados.

Keywords (Palavras-chave): Contém ações reutilizáveis que ajudam a evitar repetição nos testes.

Código Básico feito nas aulas.

Crie um novo arquivo com a extensão .robot e copie o código abaixo.

*** Settings ***
Documentation     Arquivo simples para requisição HTTP em APIs
Library           RequestsLibrary

*** Variables ***
${BASE_URL}       https://serverest.dev 
${nome_do_usuario}        Monica Souza
${senha_do_usuario}       Teste123
${email_do_usuario}        monicasilva36@gmail.com

*** Test Cases ***

Cenário: GET Todos os Usuários 200
   [tags]      GET
   Criar Sessão Serverest
   GET Endpoint /usuarios
   Validar Status Code 200 
   Validar Quantidade ${484} 
   Printar Conteudo Response   

Cenário: POST Cadastrar Usuários 201
   [tags]      POST
   Criar Sessão Serverest
   POST Endpoint /usuarios
   Validar Status Code 201
   Validar Se Mensagem Contem sucesso

Cenário: PUT Editar Usuário 200
   [tags]      PUT
   Criar Sessão Serverest
   PUT Endpoint /usuarios
   Validar Status Code 201

Cenário: DELETE Excluir Usuário 200
   [tags]      DELETE
   Criar Sessão Serverest
   DELETE Endpoint /usuarios
   Validar Status Code 200

*** Keywords ***

Criar Sessão Serverest
   Create Session    serverest    ${BASE_URL} 

GET Endpoint /usuarios
   ${response}    GET On Session    serverest    /usuarios
   Set Global Variable    ${response}

POST Endpoint /usuarios
   &{payLoad}     Create Dictionary    nome=${nome_do_usuario}    email=${email_do_usuario}   password=${senha_do_usuario}    administrador=true
   ${response}    POST On Session    serverest    /usuarios    data=&{payLoad}
   Log To Console  Status Code: ${response.status_code}
   Set Global Variable    ${response}

PUT Endpoint /usuarios 
   &{payLoad}     Create Dictionary    nome=Jorge Ferraz    email=jorgeferraz38@gmail.com    password=456    administrador=true  
   ${response}    PUT On Session    serverest    /usuarios/OJXoUBnX84BeQOQJ    data=&{payLoad}
   Log To Console  Status Code: ${response.status_code}
   Set Global Variable    ${response}

DELETE Endpoint /usuarios
   ${response}    DELETE On Session    serverest    /usuarios/06b7lgsZIvGRjo4t
   Log To Console  Status Code: ${response.status_code}
   Set Global Variable    ${response}

Validar Status Code ${statuscode}
    Should Be True     ${response.status_code} == ${statuscode}

Validar Quantidade ${quantidade}
    Should Be Equal     ${response.json()["quantidade"]}      ${quantidade}

Validar Se Mensagem Contem ${palavra}
    Should Contain     ${response.json()["message"]}          ${palavra}

Printar Conteudo Response 
    Log To Console      Nome: ${response.json()["usuarios"][5]["nome"]} 


